version: "3.9"
services:
  mongo:
    image: "mongo:latest"
    container_name: "mongo"
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/init.js
      - mongo-data:/data/db
      - ./mongo-audit:/var/log
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - mynetwork
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: "api"
    depends_on:
      - mongo
    environment:
      - PORT=${PORT}
      - MONGO_URI=${MONGO_URI}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./api/Files/Images:/API/Files/Images
    networks:
      - mynetwork
    env_file:
      - .env

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    depends_on:
      - api
    environment:
      - VITE_API_URL=${VITE_API_URL}
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/nginx/sites-available:/etc/nginx/sites-available
      - /etc/nginx/sites-enabled:/etc/nginx/sites-enabled
      - /etc/nginx:/etc/nginx
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    command: ["nginx", "-g", "daemon off;"]
    depends_on:
      - client
      - api
    networks:
      - mynetwork
      - mailcow-network:
        external: true
        name: mailcowdockerized_mailcow-network

volumes:
  mongo-data:
  mailconfig:

networks:
  mynetwork:
  mailcow-network:
    external: true
    name: mailcowdockerized_mailcow-network
